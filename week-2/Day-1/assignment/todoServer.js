/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const { log } = require("console");
const express = require("express");
const app = express();
const fs = require("fs");

app.use(express.json());

const searchIndex = (arr, id) => {
	let todoIndex = -1;

	const transformFunction = (item, index) => {
		if (item.id === id) todoIndex = index;
	};
	arr.map(transformFunction);

	return todoIndex;
};

app.get("/todos", (req, res) => {
	fs.readFile("todos.json", "utf-8", (err, data) => {
		data = JSON.parse(data);
		res.status(200).send(data);
	});
});

app.get("/todos/:id", (req, res) => {
	let id = req.params.id;
	id = parseInt(id);
	fs.readFile("todos.json", "utf-8", (err, data) => {
		data = JSON.parse(data);
		const index = searchIndex(data, id);

		if (index === -1) res.sendStatus(404);
		res.status(200).json(data[index]);
	});
});

app.post("/todos", (req, res) => {
	const title = req.body.title;
	const completed = req.body.completed;
	const description = req.body.description;

	const todo = {
		title: title,
		completed: completed,
		description: description,
		id: Math.floor(Math.random() * 10000),
	};

	fs.readFile("todos.json", "utf-8", (err, data) => {
		data = JSON.parse(data);
		data.push(todo);

		fs.writeFile("todos.json", JSON.stringify(data), (err) => {
			if (err) res.status(500);
			res.status(201).json({ id: todo.id });
		});
	});
});

app.put("/todos/:id", (req, res) => {
	let id = req.params.id;
	id = parseInt(id);

	const title = req.body.title;
	const completed = req.body.completed;

	fs.readFile("todos.json", "utf-8", (err, data) => {
		if (err) res.sendStatus(500);

		data = JSON.parse(data);
		const index = searchIndex(data, id);

		if (index === -1) res.sendStatus(404);

		data[index].title = title;
		data[index].completed = completed;

		fs.writeFile("todos.json", JSON.stringify(data), (err) => {
			if (err) res.sendStatus(404);
			else res.sendStatus(200);
		});
	});
});

app.delete("/todos/:id", (req, res) => {
	let id = req.params.id;
	id = parseInt(id);

	fs.readFile("todos.json", "utf-8", (err, data) => {
		data = JSON.parse(data);
		const index = searchIndex(data, id);

		if (index === -1) res.sendStatus(404);

		data.splice(index, 1);
		fs.writeFile("todos.json", JSON.stringify(data), (err) => {
			if (err) res.sendStatus(404);
			else res.sendStatus(200);
		});
	});
});

module.exports = app;
